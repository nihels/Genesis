model IntegratedCityModel

global {
    // Shared shape files and global variables
    file shape_file_buildings <- file("../includes/PopBuild.shp");
    file shape_file_roads <- file("../includes/FinRod1.shp");
    file nodes_shape_file <- shape_file("../includes/finalnodes.shp");
    geometry shape <- envelope(nodes_shape_file);
    float step <- 0.20 #mn;
    date starting_date <- date("2019-09-01-00-00-00");
    list males<-[9,13,20];
    list females<-[9,12,23];
    int min_work_start <- 6;
    int max_work_start <- 8;
    int min_work_end <- 16;
    int max_work_end <- 20;
    float min_speed <- 1.0 #km / #h;
    float max_speed <- 1.2 #km / #h;
    graph pedestrian_network;
    graph car_network;
   	list<building> residential_buildings;
	list<building> industrial_buildings;
	list<building> other_residential;
	list<car> cars;
	list<point> checkpoint;
	int count_people <- 0;
    init {
        // Unified initialization for both road and building networks
        create building from: shape_file_buildings with: [type::string(read("NATURE"))] {
            if (name = "Chiesa di San Lorenzo Martire" or name = "Hotel Le Sorgenti") {
                color <- #red;
            } else {
                bool var0 <- flip(0.9);
                if var0 {
                    color <- #olive;
                    type <- "Residential";
                } else {
                    color <- #orange;
                    type <- "Industrial";
                }
            }
        }
		    create road from: shape_file_roads {
            create road {
                num_lanes <- myself.num_lanes;
                shape <- polyline(reverse(myself.shape.points));
                maxspeed <- myself.maxspeed;
                linked_road <- myself;
                myself.linked_road <- self;
            }
            
            }
        residential_buildings <- building where (each.type="Residential");
         industrial_buildings <- building where (each.type="Industrial");
		 other_residential <- building where (each.name = "Chiesa di San Lorenzo Martire" or each.name = "Hotel Le Sorgenti");   
		  
         create intersection from: nodes_shape_file; // Initialize intersections
          
            
      	create car number: 15 { 
      		location  <- one_of(intersection).location;
      		cars <- car;
            }

        // Create a unified road network for both cars and people
        
        pedestrian_network <- as_edge_graph(road, 50) ;
        car_network <- as_driving_graph(road, intersection);
        
         loop i from: 0 to: length(males) - 1 {
        create people number: males[i] {
            color <- #dodgerblue;
            speed <- rnd(min_speed, max_speed);
            start_work <- rnd(min_work_start, max_work_start);
            end_work <- rnd(min_work_end, max_work_end);
            living_place <- one_of(residential_buildings);
            working_place <- one_of(industrial_buildings);
            objective <- "resting";
 			location <- any_location_in(living_place); // Set initial location inside a residential building
 			//the_target <- any_location_in(one_of(other_residential)); // Corrected variable name
 			
            size <- 5;
        }
    }
   	    		//loop i over:females{
		loop i from: 0 to: length(females)-1{
	       	create people number: females[i] {
	            color <- #salmon;
	            speed <- rnd(min_speed, max_speed);
	            start_work <- rnd(min_work_start, max_work_start);
	            end_work <- rnd(min_work_end, max_work_end);
	            living_place <- one_of(residential_buildings);
	            working_place <- one_of(industrial_buildings);
	            objective <- "resting";
 				location <- any_location_in(living_place); // Set initial location inside a residential building
 				// the_target <- any_location_in(one_of(other_residential)); // Corrected variable name
 				
 				
 	        	size <- 5;
    		}
   	    }
        
    }
}

species building {
    string type;
    rgb color <- #red;

    aspect base {
        draw shape color: color;
    }
}

species road skills: [skill_road] {
    aspect default {
        // Define how the road is drawn. You can include conditional coloring if needed
        draw shape color: #cadetblue;
   }   
}


species intersection skills: [skill_road_node] ;


species people skills:[moving] {
    rgb color <- #blue;
    building living_place <- nil;
    building working_place <- nil;
    int start_work;
    int end_work;
    string objective;
    point the_target <- nil;
    float size;   
    // Set age-specific attributes
    reflex time_to_work when: current_date.hour = start_work and objective = "resting" {
        objective <- "working";
        the_target <- any_location_in(working_place);
    }

    reflex time_to_go_home when: current_date.hour = end_work and objective = "working" {
        objective <- "resting";
        the_target <- any_location_in(living_place);
    }

    reflex move when: the_target != nil {
        path path_followed <- goto(target: the_target, on: pedestrian_network, return_path: true);
        list<geometry> segments <- path_followed.segments;
        loop line over: segments {
            float dist <- line.perimeter;
            
        }
        if the_target = location {
            the_target <- nil;
        }
    }
    
	    
    
    aspect base {
        draw circle(size) color: color border: #black;
    }
}

species car skills: [advanced_driving] 

{
	rgb color <- #blue;
	init {
		
		max_speed <- 5 #km / #h;
		max_acceleration <- 0.15;
	}

	reflex select_next_path when: current_path = nil {
		// A path that forms a cycle
		do compute_path graph: car_network target: one_of(intersection);
	}
	
	reflex commute when: current_path != nil {
		do drive;
	}
	aspect base {
		draw rectangle(20,6) color: color rotate: heading  border: #black;
	}
}

experiment IntegratedCityExperiment type: gui {
    output {
        display city_display type: 3d {
            species building aspect:base;
            species road aspect:default;
            species people aspect: base;
            species car aspect: base;
        }
    }
}