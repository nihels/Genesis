model IntegratedCityModel
global {
    // Shared shape files and global variables
    file shape_file_buildings <- file("../includes/PopBuild.shp");
    file shape_file_roads <- file("../includes/FinRod1.shp");
    file nodes_shape_file <- shape_file("../includes/finalnodes.shp");
    geometry shape <- envelope(nodes_shape_file);
    float step <- 0.10 #mn;
    date starting_date <- date("2019-09-01-00-00-00");
    list males<-[9,13,20];
    list females<-[9,12,23];
    list<people> multipeople;
    list<car> cars;
    int min_work_start <- 6;
    int max_work_start <- 8;
    int min_work_end <- 16;
    int max_work_end <- 20;
    float min_speed <- 1.0 #km / #h;
    float max_speed <- 1.2 #km / #h;
    graph pedestrian_network;
    graph car_network;
    list<building> residential_buildings;
    list<building> industrial_buildings;
    list<building> other_residential;

    init {
        // Create buildings and roads
        create building from: shape_file_buildings with: [type::string(read("NATURE"))] {
            // Building initialization logic...
        }
        residential_buildings <- building where (each.type = "Residential");
        industrial_buildings <- building where (each.type = "Industrial");
        other_residential <- building where (each.name = "Chiesa di San Lorenzo Martire" or each.name = "Hotel Le Sorgenti");

        create road from: shape_file_roads {
            // Road initialization logic...
        }

        // Create intersections
        create intersection from: nodes_shape_file;

        // Create a unified road network for both cars and people
        pedestrian_network <- as_edge_graph(road, 50);
        car_network <- as_driving_graph(road, intersection);

        // Create people and cars
        loop i from: 0 to: length(males) - 1 {
            create people number: males[i] {
            multipeople <- people;
            color <- #dodgerblue;
            speed <- rnd(min_speed, max_speed);
            start_work <- rnd(min_work_start, max_work_start);
            end_work <- rnd(min_work_end, max_work_end);
            living_place <- one_of(residential_buildings);
            working_place <- one_of(industrial_buildings);
            objective <- "resting";
 			location <- any_location_in(living_place); // Set initial location inside a residential building
            size <- 5;
            add self to: multipeople;
            }
        }
        loop i from: 0 to: length(females) - 1 {
            create people number: females[i] {
         	multipeople <- people;
            color <- #dodgerblue;
            speed <- rnd(min_speed, max_speed);
            start_work <- rnd(min_work_start, max_work_start);
            end_work <- rnd(min_work_end, max_work_end);
            living_place <- one_of(residential_buildings);
            working_place <- one_of(industrial_buildings);
            objective <- "resting";
 			location <- any_location_in(living_place); // Set initial location inside a residential building
            size <- 5;
            add self to: multipeople;
            }
        }
         pedestrian_network <- as_edge_graph(road, 50) ;
         car_network <- as_driving_graph(road, intersection);
        
        create car number: 15 {
      		location  <- one_of(intersection).location;
            add self to: cars;
        }
        
        

        // Assign cars to people
      /*   loop i from: 0 to: length(multipeople) - 1 {
            people this_person <- multipeople at i;
            this_person.personal_car <- this_car;
            this_car.location <- this_person.living_place;
            this_person.car_target <- this_car.location;
        }*/
        
        loop person over: multipeople {
        car nearest_car <- any_one_of(cars, each.distance_to(person.location));
        this_person.personal_car <- nearest_car;
        person.car_target <- nearest_car.location;
    }
}
    }
    
species building {
    string type;
    rgb color <- #red;

    aspect base {
        draw shape color: color;
    }
}    
species road skills: [skill_road] {
    aspect default {
        draw shape color: #cadetblue end_arrow:1;
   }   
}

species intersection skills: [skill_road_node] ;

species people skills: [moving]{
	bool has_car<-false;
	bool in_car <- false;
	car personal_car <-nil;
	point car_target <-nil;
    rgb color <- #blue;
    building living_place <- nil;
    building working_place <- nil;
    int start_work;
    int end_work;
    string objective;
    point the_target <- nil;
    float size;
    
    
     reflex move {
        if (personal_car != nil and not in_car) {
            // Move towards the car if not already in it
            if (distance_to(personal_car.location) > 1) { // 1 is the proximity threshold
                do goto target: personal_car.location;
            } else {
                // Enter the car
                in_car <- true;
                personal_car.n_of_people_in <- personal_car.n_of_people_in + 1;
            }
        } else if (in_car and personal_car != nil) {
            // If in car, update location to car's location
            self.location <- personal_car.location;
        } else {
            // Regular movement behavior when not using a car
            if (current_date.hour >= start_work and current_date.hour < end_work) {
                the_target <- any_location_in(working_place);
            } else {
                the_target <- any_location_in(living_place);
            }
            if (the_target != nil) {
                do goto target: the_target;
            }
        }
    }
    }
