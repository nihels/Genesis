model IntegratedCityModel
								/*DECLARATION OF VARIABLES USED GLOBALLY */
global {
    // Shared shape files and global variables
    file shape_file_buildings <- file("../includes/PopBuild.shp");
    file shape_file_roads <- file("../includes/FinRod2.shp");
    file nodes_shape_file <- shape_file("../includes/finalnodes2.shp");
    geometry shape <- envelope(nodes_shape_file);
    float step <- 0.10 #mn;
    date starting_date <- date("2019-09-01-00-00-00");
    list males<-[9,13,20];
    list females<-[9,12,23];
	list<people>  multipeople;
	float min_distance ;
	
    int min_work_start <- 6;
    int max_work_start <- 8;
    int min_work_end <- 16;
    int max_work_end <- 20;
    float min_speed <- 1.0 #km / #h;
    float max_speed <- 1.2 #km / #h;
    graph pedestrian_network;
    graph car_network;
   	list<building> residential_buildings;
	list<building> industrial_buildings;
	list<building> other_residential;
	list<car> cars;
	list<point> checkpoint;
	
									/*INITIATE AGENTS AND SPECIES */
    init {
        // Unified initialization for both road and building networks
        create building from: shape_file_buildings with: [type::string(read("NATURE"))] {
            if (name = "Chiesa di San Lorenzo Martire" or name = "Hotel Le Sorgenti") {
                color <- #red;
            }
             else {
                bool var0 <- flip(0.9);
                if var0 {
                    color <- #olive;
                    type <- "Residential";
                } else {
                    color <- #orange;
                    type <- "Industrial";
                }
            }
        }
		 create road from: shape_file_roads {
         create road {
                num_lanes <- myself.num_lanes;
                shape <- polyline(reverse(myself.shape.points));
                maxspeed <- myself.maxspeed;

            }
            
            }
            
            
        residential_buildings <- building where (each.type="Residential");
         industrial_buildings <- building where (each.type="Industrial");
		 other_residential <- building where (each.name = "Chiesa di San Lorenzo Martire" or each.name = "Hotel Le Sorgenti");   
		  
         create intersection from: nodes_shape_file; // Initialize intersections 
            
      	 create car number: 15 { 
      		location  <- one_of(intersection).location;
      		cars <- car;
            }

        // CREATE a unified  NETWORK for both cars and people
        
         pedestrian_network <- as_edge_graph(road, 30) ;
         
         car_network <- as_driving_graph(road, intersection);
         
        // 
        
         loop i from: 0 to: length(males) - 1 {
         create people number: males[i] {
         	multipeople <- people;
            color <- #dodgerblue;
            speed <- rnd(min_speed, max_speed);
            start_work <- rnd(min_work_start, max_work_start);
            end_work <- rnd(min_work_end, max_work_end);
            living_place <- one_of(residential_buildings);
            working_place <- one_of(industrial_buildings);
            objective <- "resting";
 			location <- any_location_in(living_place); // Set initial location inside a residential building
            size <- 5;
            
           
        }
    }
   	    		//loop i over:females{
		loop i from: 0 to: length(females)-1{
	    create people number: females[i] {
	       		multipeople <- people;
	            color <- #salmon;
	            speed <- rnd(min_speed, max_speed);
	            start_work <- rnd(min_work_start, max_work_start);
	            end_work <- rnd(min_work_end, max_work_end);
	            living_place <- one_of(residential_buildings);
	            working_place <- one_of(industrial_buildings);
	            objective <- "resting";
 				location <- any_location_in(living_place); // Set initial location inside a residential building
 	        	size <- 5;
    		}
   	    }
   	    
   	    loop i from:0 to:length(cars)-1 { 
        people this_person <- one_of(multipeople); 
        this_person.personal_car <- cars[i]; 
        cars[i].location <- this_person.living_place; 
        this_person.car_target <- this_person.personal_car.location; 
        }
          
   
    }
    
}

													/*ATTRIBUTES AND BEHAVIOUR*/

species building {
    string type;
    rgb color <- #red;

    aspect base {
        draw shape color: color;
    }
}

species road skills: [skill_road] {
    aspect default {
        draw shape color: #cadetblue end_arrow:1;
   }   
}

species intersection skills: [skill_road_node] ;


species people skills:[moving] {
	bool has_car<-false;
	bool in_car <- false;
	car personal_car <-nil;
	point car_target <-nil;
    rgb color <- #blue;
    building living_place <- nil;
    building working_place <- nil;
    int start_work;
    int end_work;
    string objective;
    point the_target <- nil;
    float size;   
    
    
    
    // Set age-specific attributes


  reflex move  { 
        if (personal_car != nil and not in_car) {
            // Move towards the car if not already in it
            if (distance_to(self,personal_car.location) < 1) 
            { // 1 is the proximity threshold
                do goto target: personal_car.location;
            } else {
                // Enter the car
                in_car <- true;
                self.location <- personal_car.location;
                personal_car.n_of_people_in <- personal_car.n_of_people_in + 1;
            }
        } else if (in_car and personal_car != nil) {
            // If in car, update location to car's location
            self.location <- personal_car.location;
        } else {
            // Regular movement behavior when not using a car
            if (current_date.hour >= start_work and current_date.hour < end_work) {
                the_target <- any_location_in(working_place);
            } else {
                the_target <- any_location_in(living_place);
            }
            if (the_target != nil) {
                do goto target: the_target;
            }
        }
    
    } 
   
 /*    //move the people in their car 
  reflex move_with_car when: personal_car!=nil { 
        path path_followed <- goto(target: personal_car.location, on: pedestrian_network, return_path: true); 
        list<geometry> segments <- path_followed.segments; 
        loop line over: segments { 
            float dist <- line.perimeter; 
        }  
        if(in_car) { 
         personal_car.driver_target <- the_target;  
         self.location <- personal_car.location; 
        } 
        else { 
         if(personal_car.location = location){ 
          in_car <- true;
          personal_car.n_of_people_in <- personal_car.n_of_people_in +1; 
         } 
         
      	}
     }*/
  aspect base 
  		{
        draw circle(size) color: color border: #black rotate:heading;
    	}
}

species car skills: [advanced_driving] {
	rgb color <- #blue;
	list<people> people_inside ;
    int n_of_people_in <- 0; // Initialized to 0
	point driver_target;
	float min_distance;
    point the_target <- nil;
	init 
	{	
		max_speed <- 5 #km / #h;
		max_acceleration <- 0.15;
	}

  reflex select_next_path when: current_path = nil {
		do compute_path graph: car_network target: any(intersection);
	}
	
  reflex commute when: current_path != nil and n_of_people_in > 0{
		do drive;
	}
	
 	reflex move_car {
        if (n_of_people_in > 0 and the_target != nil) {
            // If there are people in the car and a target is set, move towards the target
            do goto target: the_target;
            if (distance_to(location, the_target) <= 5.0) { // Assuming 5.0 is a proximity threshold
                // Reset the target upon reaching the destination
                the_target <- nil;
            }
        }
        
        }
	
	
	
  aspect base 
  {
		draw rectangle(20,6) color: color rotate: heading  border: #black;
	}
}
													
													/*EXPERIMENT */
experiment IntegratedCityExperiment type: gui {
    output {
        display city_display type: 3d {
            species building aspect:base;
            species road aspect:default;
            species people aspect: base;
            species car aspect: base;
            species intersection;
        }
        
    }
}


