/**
* Name: Traffic
* Description: define species for traffic simulation
* Author: Patrick Taillandier & Duc Pham
* Tags: driving skill, graph, agent_movement, skill, transport
*/
model simple_traffic_model



global {
	shape_file nodes_shape_file <- shape_file("../../includes/finalnodes.shp");
	shape_file roads_shape_file <- shape_file("../../includes/FinRod1.shp");
	file shape_file_buildings <- file("../../includes/PopBuild.shp");
	geometry shape <- envelope(nodes_shape_file);
	graph road_network;
	list<building> residential_buildings;
	list<building> industrial_buildings;
	list<building> other_residential;
	int min_work_start <- 6;
    int max_work_start <- 8;
    int min_work_end <- 16;
    int max_work_end <- 20;
    float min_speed <- 1.0 #km / #h;
    float max_speed <- 1.2 #km / #h;
	
	init {
		create intersection from: nodes_shape_file;
		
		create building from: shape_file_buildings with: [type::string(read("NATURE"))] {
            if (name = "Chiesa di San Lorenzo Martire" or name = "Hotel Le Sorgenti") {
                color <- #red;
            } else {
                bool var0 <- flip(0.9);
                if var0 {
                    color <- #olive;
                    type <- "Residential";
                } else {
                    color <- #orange;
                    type <- "Industrial";
                }
            }
        }		
		create road from: roads_shape_file {
			// Create another road in the opposite direction
			   create road { 
    num_lanes <- myself.num_lanes; 
    shape <- polyline(reverse(myself.shape.points)); 
    maxspeed <- myself.maxspeed; 
    linked_road <- myself; 
    myself.linked_road <- self; 
   } 
  
		}
		
		create vehicle number: 100 with: (location: one_of(intersection).location);
		
		
		road_network <- as_driving_graph(road, intersection);
		

	}

}

species road skills: [skill_road] {
	rgb color <- #black;
	aspect base {
		draw shape color: color end_arrow: 2;
	}
}
species building {
    string type;
    rgb color <- #white;

    aspect base {
        draw shape color: color;
    }
}

species intersection skills: [skill_road_node] ;

species vehicle skills: [advanced_driving] 
{	
	int start_work;
	int end_work;
	string objective;
	building home;
    building work;
    point driver_target;
	rgb color <- rnd_color(255);
	init {
		vehicle_length <- 1.9 #m;
		max_speed <- 100 #km / #h;
		max_acceleration <- 3.5;
		home <- one_of(residential_buildings);
        work <- one_of(industrial_buildings);
	}

	reflex select_next_path when: current_path = nil {
		
		
		do compute_path graph: road_network target: any(intersection) ;
	}
	
    reflex time_to_work when: current_date.hour = start_work and objective = "resting" and current_path !=nil {
    	objective <- "working";
		driver_target <- work.location;
		do drive;
		
	}
	  reflex time_to_go_home when: current_date.hour = end_work and objective = "working" and current_path !=nil {
        objective <- "resting";
        driver_target <- home.location;
        do drive;
    }
	aspect base {
		draw triangle(15) color: color rotate: heading + 90 border: #black;
	}
}



experiment city type: gui {
	output synchronized: true {
		display map type:2d background: #darkcyan {
			species road aspect: base;
			species vehicle aspect: base;
			species building aspect:base transparency:0.9;	
			
				}
	}
}