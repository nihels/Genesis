/**
* Name: Genesis
* Based on the internal empty template. 
* Author: DiegoSaitta
* Tags: 
*/






model Genesis
global {
    file shape_file_buildings <- file("../../includes/PopBuild.shp");
    file shape_file_roads <- file("../../includes/FinRod2.shp");
    file nodes_shape_file <- shape_file("../../includes/finalnodes2.shp");
    file shape_file_bounds <- file("../../includes/FinRod2.shp");
    geometry shape <- envelope(shape_file_bounds);
    float step <- 0.5 #mn;
    date starting_date <- date("2019-09-01-00-00-00");
      
	

    //int nb_females_0_4 <- 3;
    
    //counter[0] = 0_4 age , counter[1] = 5_9 age, counter[2] = 10_14 age, counter[3] = 15_19 age, counter[4] = 0_4 age. 
	//list males<-[94,130,95,138,120,141];
    //list females<-[91,102,109,119,124];
    	list males<-[9,13,20];
        list females<-[9,12,23];
        
        
         list<point> car_locations <- [ {58.953223651391454,259.6835558190942,0.0}, 
                                   {153.21956073766341,99.26790940761566,0.0}, 
                                   {136.54205973097123,110.04498141538352,0.0} ];
    
    
    
    //int nb_people_m <- 30;  // Number of female people
    //int nb_people_f <- 30;  // Number of female people
    int min_work_start <- 6;
    int max_work_start <- 8;
    int min_work_end <- 16;
    int max_work_end <- 20;
    float min_speed <- 1.0 #km / #h;
    float max_speed <- 5.0 #km / #h;
    graph the_graph;
	list<building> residential_buildings;
	list<building> industrial_buildings;
	list<building> other_residential;
   init {
        create building from: shape_file_buildings with: [type::string(read("NATURE"))] {
            if (name = "Chiesa di San Lorenzo Martire" or name = "Hotel Le Sorgenti") {
                color <- #red;
            } else {
                bool var0 <- flip(0.9);
                if var0 {
                    color <- #skyblue;
                    type <- "Residential";
                } else {
                    color <- #orange;
                    type <- "Industrial";
                }
            }
        }
        
        create road from: shape_file_roads;
        map<road, float> weights_map <- road as_map(each::(each.destruction_coeff * each.shape.perimeter));
        the_graph <- as_edge_graph(road,50) with_weights weights_map;

         residential_buildings <- building where (each.type="Residential");
         industrial_buildings <- building where (each.type="Industrial");
		 other_residential <- building where (each.name = "Chiesa di San Lorenzo Martire" or each.name = "Hotel Le Sorgenti");
		
		
		 loop i from: 0 to: length(males) - 1 {
        create people number: males[i] {
            color <- #green;
            speed <- rnd(min_speed, max_speed);
            start_work <- rnd(min_work_start, max_work_start);
            end_work <- rnd(min_work_end, max_work_end);
            living_place <- one_of(residential_buildings);
            working_place <- one_of(industrial_buildings);
            objective <- "resting";
 			location <- any_location_in(living_place); // Set initial location inside a residential building
 			//the_target <- any_location_in(one_of(other_residential)); // Corrected variable name
 			
            size <- 5;
        }
    }
   	    		//loop i over:females{
		loop i from: 0 to: length(females)-1{
	       	create people number: females[i] {
	            color <- #pink;
	            speed <- rnd(min_speed, max_speed);
	            start_work <- rnd(min_work_start, max_work_start);
	            end_work <- rnd(min_work_end, max_work_end);
	            living_place <- one_of(residential_buildings);
	            working_place <- one_of(industrial_buildings);
	            objective <- "resting";
 				location <- any_location_in(living_place); // Set initial location inside a residential building
 				// the_target <- any_location_in(one_of(other_residential)); // Corrected variable name
 				
 				
 	        	size <- 5;
    		}
   	    }
   	    
   	    loop i from: 0 to: length(car_locations) - 1 {
        create car {
            location <- car_locations[i];
        }
	}
}

}

species building {
    string type;
    rgb color <- #red;

    aspect base {
        draw shape color: color;
    }
}

species road {
    float destruction_coeff <- rnd(1.0, 2.0) max: 2.0;
    //int colorValue <- int(255 * (destruction_coeff - 1)) update: int(255 * (destruction_coeff - 1));
    //rgb color <- rgb(min([255, colorValue]), max([0, 255 - colorValue]), 0) update: rgb(min([255, colorValue]), max([0, 255 - colorValue]), 0);
	rgb color <- #black;
    aspect base {
        draw shape color: color;
    }
}

species people skills:[moving] {
    rgb color <- #blue;
    building living_place <- nil;
    building working_place <- nil;
    int start_work;
    int end_work;
    string objective;
    point the_target <- nil;
    float size;   
    // Set age-specific attributes
    reflex time_to_work when: current_date.hour = start_work and objective = "resting" {
        objective <- "working";
        the_target <- any_location_in(working_place);
    }

    reflex time_to_go_home when: current_date.hour = end_work and objective = "working" {
        objective <- "resting";
        the_target <- any_location_in(living_place);
    }

    reflex move when: the_target != nil {
        path path_followed <- goto(target: the_target, on: the_graph, return_path: true);
        list<geometry> segments <- path_followed.segments;
        loop line over: segments {
            float dist <- line.perimeter;
            
        }
        if the_target = location {
            the_target <- nil;
        }
    }
    aspect base {
        draw circle(size) color: color border: #black;
    }
}

species car skills:[moving] {
    rgb color <- #yellow;
    float speed <- 5 #km / #h;
    float size;
    building living_place <- nil;
    building working_place <- nil;
    point the_target <- nil;
    string objective <- "resting"; // Initial objective
    int start_work <- 6; // Work starts at 6 AM
    int end_work <- 18; // Work ends at 6 PM
    
    reflex start_moving when: current_date.hour = start_work and objective = "resting" {
        objective <- "working";
        the_target <- any_location_in(working_place);
    }
    reflex stop_moving when: current_date.hour = start_work and objective = "working" {
        objective <- "resting";
        the_target <- any_location_in(living_place);
    }
     reflex move when: the_target != nil {
        path path_followed <- goto(target: the_target, on: the_graph, return_path: true);
        // Add logic for moving along the path
        if the_target = location {
            the_target <- nil; // Reset the target when reached
        }
    }
    aspect default{
    	        draw square(3) color: color border: #black rotate:heading;
    	
    }
    
    }
   






experiment city_people type: gui {
   output {
        display city_display type: 2d {
            species building aspect: base;
            species road aspect: base;
            species people aspect: base;
            species car aspect:default;
            }
        }
    }


