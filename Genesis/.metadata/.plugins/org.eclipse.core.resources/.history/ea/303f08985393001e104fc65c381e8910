/**
* Name: DiegoModel
* Based on the internal empty template. 
* Author: DiegoSaitta
* Tags: 
*/


model DiegoModel
global {
	//strade	
    file roads_shape_file <- file("../includes/road_suddivided.shp");
    geometry shape <- envelope(roads_shape_file);
    //incroci
    file nodes_shape_file <- shape_file("../includes/nodes_suddivided.shp");
    //edifici
    file shape_file_buildings <- file("../includes/PopBuild.shp");
  	list<building> residential_buildings;
	list<building> industrial_buildings;
	list<building> other_residential;
	
    
    //orari di lavoro
    int min_work_start <- 6;
    int max_work_start <- 8;
    int min_work_end <- 16;
    int max_work_end <- 20;
    
    //velocitÃ 
    float min_speed <- 1.0 #km / #h;
    float max_speed <- 5.0 #km / #h;
    
    float step <- 0.20 #mn;
    date starting_date <- date("2019-09-01-00-00-00");

    list males<-[9,13,20];
	//list males<-[94,130,95,138,120,141,162,225,195,218,193,192,183,125,147,266];
    list females<-[9,12,23];
    //list females<-[91,102,109,119,124,164,162,201,196,201,207,199,189,148,163,395];
    
	int count_people <- 0;
    
    graph road_network;
    graph pedestrian_network;
    
   	list<car> cars;
   	
   	
   init{
   			//creiamo gli edifici
        create building from: shape_file_buildings with: [type::string(read("NATURE"))] {
            if (name = "Chiesa di San Lorenzo Martire" or name = "Hotel Le Sorgenti") {
                color <- #red;
            } else {
                bool var0 <- flip(0.9);
                if var0 {
                    color <- #olive;
                    type <- "Residential";
                } else {
                    color <- #orange;
                    type <- "Industrial";
                }
            }
        }
        residential_buildings <- building where (each.type="Residential");
	    industrial_buildings <- building where (each.type="Industrial");
		other_residential <- building where (each.name = "Chiesa di San Lorenzo Martire" or each.name = "Hotel Le Sorgenti");
	
   		//creiamo la rete di connessioni fra le strade
   	    create intersection from: nodes_shape_file; 
   	     
   		//creiamo la rete stradale
    	create road from: roads_shape_file {
    		//creiamo un'altra strada in senso opposto
	         create road {
	                num_lanes <- myself.num_lanes;
	                shape <- polyline(reverse(myself.shape.points));
	                maxspeed <- myself.maxspeed;
	                linked_road <- myself;
	                myself.linked_road <- self;
            }
        }
		road_network <- as_driving_graph(road, intersection);
		

		//creiamo le auto e le inseriamo dentro la strada
      	create car number: 15 with: (location: one_of(intersection).location){
      		 //add item:car(car) to: cars;
      		 cars <- car;
      	}
   
   		loop i from: 0 to: length(males) - 1 {
	        create people number: males[i] {
	            color <- #green;
	            speed <- rnd(min_speed, max_speed);
	            start_work <- rnd(min_work_start, max_work_start);
	            end_work <- rnd(min_work_end, max_work_end);
	            living_place <- one_of(residential_buildings);
	            working_place <- one_of(industrial_buildings);
	            objective <- "resting";
	 			location <- any_location_in(living_place); // Set initial location inside a residential building
	 			personal_car <- cars[count_people];
	 			car_target <- personal_car.location;
	 			count_people <- count_people+1;
	            size <- 5;
	        }
	    }
   	    		//loop i over:females{
		loop i from: 0 to: length(females)-1{
	       	create people number: females[i] {
	            color <- #pink;
	            speed <- rnd(min_speed, max_speed);
	            start_work <- rnd(min_work_start, max_work_start);
	            end_work <- rnd(min_work_end, max_work_end);
	            living_place <- one_of(residential_buildings);
	            working_place <- one_of(industrial_buildings);
	            objective <- "resting";
 				location <- any_location_in(living_place); // Set initial location inside a residential building
 				personal_car <- cars[count_people];
 				car_target <- personal_car.location;
 				
 				count_people <- count_people+1;
 	        	size <- 5.0;
    		}
   	    }
   }


species road skills: [road_skill] {
    aspect default {
        draw shape color: #cadetblue end_arrow:2;
   }   
}
}
species intersection skills: [intersection_skill]{
	    aspect default {
        draw shape color: #red ;
   }   
} 

species car skills: [driving] {
	rgb color <- #blue;
	int capacity <- 2;
	point location <- nil;
	float size <- 20;
	int people_in <- nil;
	point driver_target <- nil;
	init 
	{	
		max_speed <- 50 #km / #h;
		max_acceleration <- 2.15;
	}
	    reflex move when: people_in != nil {
	        path path_followed <- goto(target: driver_target, on: road_network, return_path: true);
	        list<geometry> segments <- path_followed.segments;
	        loop line over: segments {
	            float dist <- line.perimeter;
	        }
	    }
	    /*
		  reflex select_next_path when: current_path = nil {
				do compute_path graph: road_network target: one_of(intersection);
			}
		  reflex commute when: current_path != nil {
				do drive;
		  		//do drive_random graph: road_network ;
			}
	     */

	
	  aspect default 
	  {
			draw triangle(10,13) color: color rotate: heading + 90  border: #black;
	  }

}

species building {
    string type;
    rgb color <- #red;

    aspect default {
        draw shape color: color;
    }
}

species people skills:[moving] {
    rgb color <- #blue;
    building living_place <- nil;
    building working_place <- nil;
    int start_work;
    int end_work;
    string objective;
    point the_target <- nil;
    float size;
    car personal_car <- nil;
    point car_target;

    // Set age-specific attributes
	reflex time_to_work when: current_date.hour = start_work and objective = "resting" {
        objective <- "working";
        the_target <- any_location_in(working_place);
    }
	reflex time_to_go_home when: current_date.hour = end_work and objective = "working" {
        objective <- "resting";
        the_target <- any_location_in(living_place);
    } 
 	reflex move when: the_target != nil and personal_car=nil {
        path path_followed <- goto(target: the_target, on: road_network, return_path: true);
        list<geometry> segments <- path_followed.segments;
        loop line over: segments {
            float dist <- line.perimeter;  
        }
        if the_target = location {
            the_target <- nil;
        }
    }
	reflex move_to_car when: personal_car!=nil {
        path path_followed <- goto(target: personal_car.location, on: road_network, return_path: true);
        list<geometry> segments <- path_followed.segments;
        loop line over: segments {
            float dist <- line.perimeter;
        }
        if(personal_car.location = location){
        	personal_car.people_in <- personal_car.people_in +1;
        	personal_car.driver_target <- the_target; 
        }
    }

    aspect default {
        draw circle(size) color: color border: #black;
    }
  }  
  experiment IntegratedCityExperiment type: gui {
    output {
        display city_display type: 2d {
            species building aspect: default;
            species road aspect:default;
            species intersection transparency: 0.9;
            species people aspect: default;
            species car aspect: default ;
        }
    }
}